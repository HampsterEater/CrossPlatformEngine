# -*- coding: utf-8 -*-

# ///////////////////////////////////////////////////////////////////////////////
# //  Icarus Game Engine
# //  Copyright © 2011 Timothy Leonard
# ///////////////////////////////////////////////////////////////////////////////	
# 
# This script takes a single argument to a specially formatted version.h file. Each
# time the script is called (typically as a post-build event) the version number in
# the file will be incremented and any other build-information updated.
# 
# Syntax:
# 	update_version.py --file <path-to-version-h>
# 
# ///////////////////////////////////////////////////////////////////////////////

import os
import datetime
from optparse import OptionParser

template = """///////////////////////////////////////////////////////////////////////////////
//  Icarus Game Engine
//  Copyright © 2011 Timothy Leonard
///////////////////////////////////////////////////////////////////////////////	
// Generated by update_version.py
// {timestamp}
///////////////////////////////////////////////////////////////////////////////	
// WARNING: Do not modify this file in any way, it's format is assumed by
//			several python scripts used during building!
///////////////////////////////////////////////////////////////////////////////	
#pragma once

#ifndef _VERSION_H_
#define _VERSION_H_

namespace AutoVersion
{
	static const char DAY[] = "{DAY}";
	static const char MONTH[] = "{MONTH}";
	static const char YEAR[] = "{YEAR}";
	
	static const char HOUR[] = "{HOUR}";
	static const char MINUTE[] = "{MINUTE}";
	static const char SECOND[] = "{SECOND}";
	
	static const char STATUS[] = "{STATUS}";
	static const char STATUS_SHORT[] = "{STATUS_SHORT}";

	static const long MAJOR = {MAJOR};
	static const long MINOR = {MINOR};
	static const long BUILD = {BUILD};
	static const long REVISION = {REVISION};

	static const char FULLVERSION_STRING[] = "{FULLVERSION_STRING}";

	static const long TOTAL_BUILDS = {TOTAL_BUILDS};
}

#endif // _VERSION_H_
"""

# Entry point of this application.
def main():
	
	parser = OptionParser()
	parser.add_option("-f", "--file", dest="filename", help="Filename to write version info to, this is a required parameter.", metavar="FILE")
	(options, args) = parser.parse_args()
	
	if not options.filename:
		parser.print_usage()
		return
		
	UpdateVersionInfo(options.filename)
	
# Parses all the values of an array out of the version file and returns an array of them.
def ValuesFromVersionFile(file, values):
	
	# Extract raw values from file.
	h = open(file, "r")
	
	for line in h:
		line = line.strip()
		
		if (line == ""):
			continue;
			
		prefix = "static const";
		if (line.lower()[:len(prefix)] == prefix.lower()):
			line = line.split(" ", 3);
			line = line[len(line) - 1]
			
			line = line.split("=")
			
			name = line[0].strip().strip("[]")
			value = line[1].strip().strip(";").strip('"')
			
			values[name] = value
			
	h.close()
	
	return values
	
# w00t, time to actually parse and update the version information.
def UpdateVersionInfo(file):

	REVISIONS_PER_BUILD = 100

	now = datetime.datetime.now()

	values = {
		"timestamp":			now.strftime("%d-%m-%Y %H:%M"),
		"DAY":					str(now.day),
		"MONTH":				str(now.month),
		"YEAR":					str(now.year),
		"HOUR":					str(now.hour),
		"MINUTE":				str(now.minute),
		"SECOND":				str(now.second),
		"STATUS":				"Alpha",
		"STATUS_SHORT":			"a",
		"MAJOR":				"1",
		"MINOR":				"0",
		"BUILD":				"0",
		"REVISION":				"0",
		"FULLVERSION_STRING":	"1.0.0.0a",
		"TOTAL_BUILDS":			"0"	
	};

	if (os.path.isfile(file) == True):
		values = ValuesFromVersionFile(file, values);
	
	# Update version information.
	totalBuilds = int(values["TOTAL_BUILDS"]) + 1
	values["TOTAL_BUILDS"] = str(totalBuilds)
	values["REVISION"] = str(totalBuilds % REVISIONS_PER_BUILD)
	values["BUILD"] = str(totalBuilds / REVISIONS_PER_BUILD)
	values["FULLVERSION_STRING"] = values["MAJOR"]+"."+values["MINOR"]+"."+values["BUILD"]+"."+values["REVISION"]+values["STATUS_SHORT"]	
	values["DAY"]   = str(now.day)
	values["MONTH"] = str(now.month)
	values["YEAR"]  = str(now.year)
	values["HOUR"] = str(now.hour)
	values["MINUTE"]  = str(now.minute)
	values["SECOND"]  = str(now.second)

	# Replace the values in the template file and use that as the contents 
	# of our new version file.
	output = template
	for k, v in values.iteritems():
		output = output.replace("{" + str(k) + "}", str(v))
		
	file = open(file, "w")
	file.write(output)
	file.close()
		

if __name__=="__main__":
    main();
